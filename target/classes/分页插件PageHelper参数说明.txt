参数说明：
1.增加dialect属性，使用时可以指定该属性（不指定的情况下，分页插件会自动判断），可选值为oracle,mysql,mariadb,sqlite,hsqldb,postgresql,db2,sqlserver,informix,h2,sqlserver2012。
2.增加offsetAsPageNum属性，默认值为false，使用默认值时不需要增加该配置，需要设为true时，需要配置该参数。当该参数设置为true时，使用RowBounds分页时，会将offset参数当成pageNum使用，可以用页码和页面大小两个参数进行分页。
3.增加rowBoundsWithCount属性，默认值为false，使用默认值时不需要增加该配置，需要设为true时，需要配置该参数。当该参数设置为true时，使用RowBounds分页会进行count查询。
4.增加pageSizeZero属性，默认值为false，使用默认值时不需要增加该配置，需要设为true时，需要配置该参数。当该参数设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果（相当于没有执行分页查询，但是返回结果仍然是Page类型）。
5.增加reasonable属性，默认值为false，使用默认值时不需要增加该配置，需要设为true时，需要配置该参数。具体作用请看上面配置文件中的注释内容。
6.为了支持startPage(Object params)方法，增加了一个params参数来配置参数映射，用于从Map或ServletRequest中取值，可以配置pageNum,pageSize,count,pageSizeZero,reasonable,orderBy,不配置映射的用默认值。
7.supportMethodsArguments支持通过Mapper接口参数来传递分页参数，默认值false，具体用法参考com.github.pagehelper.test.basic包下的ArgumentsMapTest和ArgumentsObjTest测试类。
8.returnPageInfo用来支持直接返回PageInfo类型，默认值none，可选参数always总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page(List)类型。用法和配置参考com.github.pagehelper.test.basic包下的PageInfoTest，特别要注意接口的返回值和xml中的resultType类型。

重要提示：
当offsetAsPageNum=false的时候，由于PageNum问题，RowBounds查询的时候reasonable会强制为false。使用PageHelper.startPage方法不受影响。
另外使用RowBounds在这种情况下返回的Page对象由于没有正确的pageNum属性，所以也不能使用PageInfo处理。
如果你不理解为什么，可以看这样一个例子：查询offset=7,limit=10，这个时候pageNum=?，这种情况没法计算pageNum，没法判断当前是第几页。


如何选择配置这些参数：
单独看每个参数的说明可能是一件让人不爽的事情，这里列举一些可能会用到某些参数的情况。
首先dialect属性是必须的，不需要解释。其他的参数一般情况下我们都不必去管，如果想了解何时使用合适，你可以参考以下场景：
场景一
如果你仍然在用类似ibatis式的命名空间调用方式，你也许会用到rowBoundsWithCount，分页插件对RowBounds支持和Mybatis默认的方式是一致，默认情况下不会进行count查询，如果你想在分页查询时进行count查询，以及使用更强大的PageInfo类，你需要设置该参数为true。
场景二
如果你仍然在用类似ibatis式的命名空间调用方式，你觉得RowBounds中的两个参数offset,limit不如pageNum,pageSize容易理解，你可以使用offsetAsPageNum参数，将该参数设置为true后，offset会当成pageNum使用，limit和pageSize含义相同。
场景三
如果觉得某个地方使用分页后，你仍然想通过控制参数查询全部的结果，你可以配置pageSizeZero为true，配置后，如可以通过设置pageSize=0或者RowBounds.limit = 0就会查询出全部的结果。
场景四
如果你分页插件使用于类似分页查看列表式的数据，如新闻列表，软件列表，你希望用户输入的页数不在合法范围（第一页到最后一页之外）时能够正确的响应到正确的结果页面，那么你可以配置reasonable为true，这时如果pageNum<1会查询第一页，如果pageNum>总页数会查询最后一页。


排序说明：
1.PageHelper.orderBy("xxx")方法配合PageHelper.startPage(xxx)
例子：
PageHelper.startPage(1, 10);
PageHelper.orderBy("countryname desc");
list = orderMapper.selectAll();
Assert.assertEquals(181, (int) list.get(0).getId());
输出的SQL(count查询和分页):
SELECT count(*) FROM country_order
SELECT * FROM country_order order by countryname desc limit ? offset ?
这种情况使用的时候，下面这两个语句没有先后顺序，都会对查询产生影响
PageHelper.startPage(1, 10);
PageHelper.orderBy("countryname desc");

2.PageHelper.startPage(1, 10, "id desc")方法
这个方法可以说是对上面一种情况的结合，效果是一样的
例子：
PageHelper.startPage(1, 10, "id desc");
list = orderMapper.selectAll();
Assert.assertEquals(183, (int) list.get(0).getId());

重点说明：
这里一定要注意一点，那就是分页和排序都使用ThreadLocal实现的，并且两者的ThreadLocal都在分页插件拦截器中清空的。
所以每次执行完一个查询后，分页和排序的ThreadLocal就会自动清空，清空就对后续的查询不会产生任何影响。