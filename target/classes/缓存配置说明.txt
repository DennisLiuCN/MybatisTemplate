一级缓存是SqlSession级别的缓存。
在操作数据库时需要构造 sqlSession对象，在对象中有一个数据结构（HashMap）用于存储缓存数据。不同的sqlSession之间的缓存数据区域（HashMap）是互相不影响的。
如果sqlSession去执行commit操作（执行插入、更新、删除），清空SqlSession中的一级缓存，这样做的目的为了让缓存中存储的是最新的信息，避免脏读。
mybatis默认支持一级缓存，不需要在配置文件去配置。
正式开发中是将mybatis和spring进行整合开发，事务控制在service中。
一个service方法中包括很多mapper方法调用。
service{
	//开始执行时，开启事务，创建SqlSession对象
	//第一次调用mapper的方法findUserById(1)
	//第二次调用mapper的方法findUserById(1)，从一级缓存中取数据
	//方法结束，sqlSession关闭
}
如果是执行两次service调用查询相同的用户信息，不走一级缓存，因为session方法结束，sqlSession就关闭，一级缓存就清空。


二级缓存是mapper级别的缓存。
多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。
二级缓存与一级缓存区别，二级缓存的范围更大，多个sqlSession可以共享一个UserMapper的二级缓存区域。
UserMapper有一个二级缓存区域（按namespace分） ，其它mapper也有自己的二级缓存区域（按namespace分）。
每一个namespace的mapper都有一个二缓存区域，两个mapper的namespace如果相同，这两个mapper执行sql查询到数据将存在相同的二级缓存区域中。
mybaits的二级缓存是mapper范围级别，除了在SqlMapConfig.xml设置二级缓存的总开关，还要在具体的mapper.xml中开启二级缓存。


二级缓存配置：
1.在核心配置文件SqlMapConfig.xml中加入
	<setting name="cacheEnabled" value="true"/>
2.在XxxMapper.xml中开启二缓存，XxxMapper.xml下的sql执行完成会存储到它的缓存区域（HashMap），<mapper>标签中加入
	<!--开启本mapper的namespace下的二级缓存-->
	<cache />
3.实体类对象实现序列号接口
	public class Xxx implements Serializable
4.其它缓存参数设置
	1).useCache配置
		在statement中设置useCache=false可以禁用当前select语句的二级缓存，即每次查询都会发出sql去查询，默认情况是true，即该sql使用二级缓存。
		<select id="findOrderListResultMap" resultMap="ordersUserMap" useCache="false">
		总结：针对每次查询都需要最新的数据sql，要设置成useCache=false，禁用二级缓存。
	2).刷新缓存（就是清空缓存）
		在mapper的同一个namespace中，如果有其它insert、update、delete操作数据后需要刷新缓存，如果不执行刷新缓存会出现脏读。
 		设置statement配置中的flushCache="true" 属性，默认情况下为true即刷新缓存，如果改成false则不会刷新。使用缓存时如果手动修改数据库表中的查询数据会出现脏读。
		<insert id="insertUser" parameterType="cn.itcast.mybatis.po.User" flushCache="true">
		总结：一般下执行完commit操作都需要刷新缓存，flushCache=true表示刷新缓存，这样可以避免数据库脏读。
	3).Cache参数
	flushInterval（刷新间隔）可以被设置为任意的正整数，而且它们代表一个合理的毫秒形式的时间段。默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新。
	size（引用数目）可以被设置为任意正整数，要记住你缓存的对象数目和你运行环境的可用内存资源数目。默认值是1024。
	readOnly（只读）属性可以被设置为true或false，只读的缓存会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。可读写的缓存会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是false。
	例如：
		<cache  eviction="FIFO"  flushInterval="60000"  size="512"  readOnly="true"/>
	这个更高级的配置创建了一个FIFO缓存，并每隔 60 秒刷新，存数结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此在不同线程中的调用者之间修改它们会导致冲突。
	可用的收回策略有如下4种, 默认的是 LRU:
	LRU – 最近最少使用的:移除最长时间不被使用的对象。
	FIFO – 先进先出:按对象进入缓存的顺序来移除它们。
	SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。
	WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。
	

mybatis整合ehcache
mybatis的特长是sql操作，缓存数据的管理不是mybatis的特长，为了提高缓存的性能将mybatis和第三方的分布式缓存框架整合，对系统进行分布式部署（集群部署方式），比如ehcache、memcache、redis等。
mybatis提供二级缓存Cache接口可以实现mybatis缓存数据与其它分布式缓存框架整合：org.apache.ibatis.cache.Cache.class，它的默认实现类为org.apache.ibatis.cache.impl.PerpetualCache.class
1.引入缓存依赖包
ehcache-core-2.6.5.jar
mybatis-ehcache-1.0.2.jar
2.引入缓存配置文件
classpath下添加：ehcache.xml
内容如下：
<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="../config/ehcache.xsd">
	<diskStore path="F:\develop\ehcache" />
	<defaultCache 
		maxElementsInMemory="1000" 
		maxElementsOnDisk="10000000"
		eternal="false" 
		overflowToDisk="false" 
		timeToIdleSeconds="120"
		timeToLiveSeconds="120" 
		diskExpiryThreadIntervalSeconds="120"
		memoryStoreEvictionPolicy="LRU">
	</defaultCache>
</ehcache>
属性说明：
 diskStore：指定数据在磁盘中的存储位置。
 defaultCache：当借助CacheManager.add("demoCache")创建Cache时，EhCache便会采用<defalutCache/>指定的的管理策略
以下属性是必须的：
 maxElementsInMemory - 在内存中缓存的element的最大数目 
 maxElementsOnDisk - 在磁盘上缓存的element的最大数目，若是0表示无穷大
 eternal - 设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断
 overflowToDisk - 设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上
以下属性是可选的：
 timeToIdleSeconds - 当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时，这些数据便会删除，默认值是0,也就是可闲置时间无穷大
 timeToLiveSeconds - 缓存element的有效生命期，默认是0.,也就是element存活时间无穷大
	diskSpoolBufferSizeMB 这个参数设置DiskStore(磁盘缓存)的缓存区大小.默认是30MB.每个Cache都应该有自己的一个缓冲区.
 diskPersistent - 在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。
 diskExpiryThreadIntervalSeconds - 磁盘缓存的清理线程运行间隔，默认是120秒。每个120s，相应的线程会进行一次EhCache中数据的清理工作
 memoryStoreEvictionPolicy - 当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出）
3.开启ehcache缓存
修改mapper.xml文件，在cache中指定EhcacheCache：
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>
根据需求调整缓存参数：
	<cache type="org.mybatis.caches.ehcache.EhcacheCache" > 
        <property name="timeToIdleSeconds" value="3600"/>
        <property name="timeToLiveSeconds" value="3600"/>
        <!-- 同ehcache参数maxElementsInMemory -->
		<property name="maxEntriesLocalHeap" value="1000"/>
		<!-- 同ehcache参数maxElementsOnDisk -->
        <property name="maxEntriesLocalDisk" value="10000000"/>
        <property name="memoryStoreEvictionPolicy" value="LRU"/>
    </cache>